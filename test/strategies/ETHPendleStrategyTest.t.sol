// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.29;

import {Test, console} from "forge-std/Test.sol";
import {SparkleXVault} from "../../src/SparkleXVault.sol";
import {TokenSwapper} from "../../src/utils/TokenSwapper.sol";
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {Vm} from "forge-std/Vm.sol";
import {TestUtils} from "../TestUtils.sol";
import {Constants} from "../../src/utils/Constants.sol";
import {IPAllActionV3} from "@pendle/contracts/interfaces/IPAllActionV3.sol";
import {IPPrincipalToken} from "@pendle/contracts/interfaces/IPPrincipalToken.sol";
import {IPYieldToken} from "@pendle/contracts/interfaces/IPYieldToken.sol";
import {IPMarketV3} from "@pendle/contracts/interfaces/IPMarketV3.sol";
import {IPMarket} from "@pendle/contracts/interfaces/IPMarket.sol";
import {IPRouterStatic} from "@pendle/contracts/interfaces/IPRouterStatic.sol";
import {IStrategy} from "../../interfaces/IStrategy.sol";
import {PendleHelper} from "../../src/strategies/pendle/PendleHelper.sol";
import {BasePendleStrategyTest} from "./BasePendleStrategyTest.t.sol";
import {DummyDEXRouter} from "../mock/DummyDEXRouter.sol";
import {PendleStrategy} from "../../src/strategies/pendle/PendleStrategy.sol";
import {IOracleAggregatorV3} from "../../interfaces/chainlink/IOracleAggregatorV3.sol";

interface IERC4626Vault {
    function convertToAssets(uint256 _share) external view returns (uint256);
    function decimals() external view returns (uint256);
}

// run this test with bnb chain fork
// forge coverage --fork-url <rpc_url> --match-path ETHPendleStrategyTest -vvv --no-match-coverage "(script|test)"
contract ETHPendleStrategyTest is BasePendleStrategyTest {
    ///////////////////////////////
    // Note this address is only meaningful for this test
    ///////////////////////////////
    address public constant ETH_PENDLE_STRATEGY_ADDRESS = 0xE5323c4E20152DE274dC6ec0ff0a32F91CEaA4D6;
    string public constant ETH_PENDLE_STRATEGY_NAME = "sparklex.pendle.strategy.eth";

    uint256 magicETHAmount = 1234567890e9;
    address ethWhale = 0xF04a5cC80B1E94C69B48f5ee68a08CD2F09A7c3E; //makerdao gem join
    address public ETH_USD_FEED = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;
    uint256 public ETH_USD_FEED_HEARTBEAT = 3600;

    function setUp() public {
        _createForkMainnet(23037947);

        magicPTAmount = 1200000000e9;

        ///////////////////////////////
        // ETH pendle PT pools: active
        ///////////////////////////////
        // superETH 2025OCT30 market
        PT_ADDR1 = IPPrincipalToken(0x1a4485101815E5afEb4d83e7A4FEbB822e683d99);
        YT_ADDR1 = 0x56D77E5dd83BE5A1A8c73dD8bd58B7AB37d3101B;
        MARKET_ADDR1 = IPMarketV3(0x2B10CffFC3e49F4aaE294d86072E5D2ec6332118);
        PT1_Whale = 0xE788865Fcaf2686183FE32e8855dcf2ee9dfB964;
        YIELD_TOKEN_FEED1 = ETH_USD_FEED;
        UNDERLYING_YIELD_ADDR1 = 0xeF101508bf4DC6CF0f0a0C135f39a41faB4E4389; // superETH

        // pufETH 2026JUN26 market
        PT_ADDR2 = IPPrincipalToken(0x84013D1a574515b6a05a0e2392584d445D39D1DF);
        YT_ADDR2 = 0xb1dd1A6f9A9f09867C7A128d99E4C1f9510d8466;
        MARKET_ADDR2 = IPMarketV3(0x02c1289dACb6d459FC784236e862bC504C991f81);
        PT2_Whale = 0x63d8020075A04405bc7BcDB978dC09f350300132;
        YIELD_TOKEN_FEED2 = ETH_USD_FEED;
        UNDERLYING_YIELD_ADDR2 = 0xD9A442856C234a39a81a089C06451EBAa4306a72; // pufETH

        stkVault = new SparkleXVault(ERC20(wETH), "SparkleX ETH Vault", "spETH");
        stkVOwner = stkVault.owner();

        vm.startPrank(stkVOwner);
        stkVault.setEarnRatio(Constants.TOTAL_BPS);
        vm.stopPrank();

        swapper = new TokenSwapper();
        mockRouter = new DummyDEXRouter();
    }

    function test_ETH_Pendle_InOut(uint256 _testVal) public {
        (myStrategy, strategist) = _createPendleStrategy();

        _fundFirstDepositGenerously(address(stkVault));

        address _user = TestUtils._getSugarUser();

        TestUtils._makeVaultDeposit(address(stkVault), _user, _testVal, 2 ether, 10 ether);

        _addPTMarketWithIntermediateOracle(
            address(MARKET_ADDR1), UNDERLYING_YIELD_ADDR1, UNDERLYING_YIELD_ADDR1, YIELD_TOKEN_FEED1, 0
        );
        _zapInWithPendlePT(wETH, myStrategy, address(PT_ADDR1), address(MARKET_ADDR1), magicETHAmount);
        _checkBasicInvariants(address(stkVault));
        uint256 _totalAssetsInStrategy = IStrategy(myStrategy).totalAssets();
        assertTrue(_assertApproximateEq(_totalAssetsInStrategy, magicETHAmount, BIGGER_TOLERANCE));

        _stormOutFromPendlePT(wETH, myStrategy, address(PT_ADDR1), address(MARKET_ADDR1), magicPTAmount);
        _checkBasicInvariants(address(stkVault));
        _totalAssetsInStrategy = IStrategy(myStrategy).totalAssets();
        assertTrue(_assertApproximateEq(_totalAssetsInStrategy, magicETHAmount, BIGGER_TOLERANCE));

        _addPTMarketWithIntermediateOracle(
            address(MARKET_ADDR2), UNDERLYING_YIELD_ADDR2, UNDERLYING_YIELD_ADDR2, YIELD_TOKEN_FEED2, 900
        );
        _zapInWithPendlePT(wETH, myStrategy, address(PT_ADDR2), address(MARKET_ADDR2), magicETHAmount);
        _checkBasicInvariants(address(stkVault));
        _totalAssetsInStrategy = IStrategy(myStrategy).totalAssets();
        uint256 _residueOfPT1AmountInAsset = PendleStrategy(myStrategy).getPTAmountInAsset(address(PT_ADDR1));
        console.log(
            "_totalAssetsInStrategyAfterBuy2:%d,_residueOfPT1AmountInAsset:%d",
            _totalAssetsInStrategy,
            _residueOfPT1AmountInAsset
        );
        assertTrue(
            _assertApproximateEq(
                _totalAssetsInStrategy, (magicETHAmount + _residueOfPT1AmountInAsset), BIGGER_TOLERANCE
            )
        );

        address[] memory _activePTMarkets = PendleStrategy(myStrategy).getActivePTs();
        assertEq(2, _activePTMarkets.length);
        assertTrue(PendleStrategy(myStrategy).getAllPTAmountsInAsset() > 0);

        // forward to market expire
        (uint80 roundId1, int256 answer1,,,) = IOracleAggregatorV3(YIELD_TOKEN_FEED1).latestRoundData();
        (uint80 roundId2, int256 answer2,,,) = IOracleAggregatorV3(YIELD_TOKEN_FEED2).latestRoundData();

        vm.warp(block.timestamp + Constants.ONE_YEAR);
        assertTrue(MARKET_ADDR2.isExpired());

        vm.mockCall(
            YIELD_TOKEN_FEED1,
            abi.encodeWithSelector(IOracleAggregatorV3.latestRoundData.selector),
            abi.encode(roundId1, answer1, block.timestamp, block.timestamp, roundId1)
        );

        vm.mockCall(
            YIELD_TOKEN_FEED2,
            abi.encodeWithSelector(IOracleAggregatorV3.latestRoundData.selector),
            abi.encode(roundId2, answer2, block.timestamp, block.timestamp, roundId2)
        );

        _redeemAfterPendlePTExpire(wETH, myStrategy, address(PT_ADDR2), YT_ADDR2, magicPTAmount);
        _checkBasicInvariants(address(stkVault));
        _totalAssetsInStrategy = IStrategy(myStrategy).totalAssets();
        _residueOfPT1AmountInAsset = PendleStrategy(myStrategy).getPTAmountInAsset(address(PT_ADDR1));
        uint256 _residueOfPT2AmountInAsset = PendleStrategy(myStrategy).getPTAmountInAsset(address(PT_ADDR2));
        console.log(
            "_totalAssetsInStrategyAfterRedeem:%d,_residueOfPT1AmountInAsset:%d,_residueOfPT2AmountInAsset:%d",
            _totalAssetsInStrategy,
            _residueOfPT1AmountInAsset,
            _residueOfPT2AmountInAsset
        );
        // assume redeemed token is 1:1 to ETH after market expire
        assertTrue(
            _assertApproximateEq(
                _totalAssetsInStrategy,
                (magicPTAmount + _residueOfPT1AmountInAsset + _residueOfPT2AmountInAsset),
                BIGGER_TOLERANCE
            )
        );
        assertTrue(ERC20(wETH).balanceOf(myStrategy) > 0);

        bytes memory EMPTY_CALLDATA;
        _removePTMarket(address(PT_ADDR1), EMPTY_CALLDATA);
        _removePTMarket(address(PT_ADDR2), EMPTY_CALLDATA);
        _activePTMarkets = PendleStrategy(myStrategy).getActivePTs();
        assertEq(0, _activePTMarkets.length);
        assertEq(0, PendleStrategy(myStrategy).getAllPTAmountsInAsset());

        vm.startPrank(strategist);
        IStrategy(myStrategy).collectAll(EMPTY_CALLDATA);
        vm.stopPrank();
        assertEq(0, ERC20(wETH).balanceOf(myStrategy));
    }

    function test_ETH_Pendle_Rollover(uint256 _testVal) public {
        (myStrategy, strategist) = _createPendleStrategy();

        _fundFirstDepositGenerously(address(stkVault));

        address _user = TestUtils._getSugarUser();

        TestUtils._makeVaultDeposit(address(stkVault), _user, _testVal, 2 ether, 10 ether);

        _addPTMarketWithIntermediateOracle(
            address(MARKET_ADDR2), UNDERLYING_YIELD_ADDR2, UNDERLYING_YIELD_ADDR2, YIELD_TOKEN_FEED2, 900
        );
        _zapInWithPendlePT(wETH, myStrategy, address(PT_ADDR2), address(MARKET_ADDR2), magicETHAmount);
        _checkBasicInvariants(address(stkVault));
        uint256 _totalAssetsInStrategy = IStrategy(myStrategy).totalAssets();
        console.log("_totalAssetsInStrategy:%d", _totalAssetsInStrategy);
        assertTrue(_assertApproximateEq(_totalAssetsInStrategy, magicETHAmount, BIGGER_TOLERANCE));

        _addPTMarketWithIntermediateOracle(
            address(MARKET_ADDR1), UNDERLYING_YIELD_ADDR1, UNDERLYING_YIELD_ADDR1, YIELD_TOKEN_FEED1, 0
        );

        address[] memory _activePTMarkets = PendleStrategy(myStrategy).getActivePTs();
        assertEq(2, _activePTMarkets.length);

        bytes memory _callData =
            hex"";
        vm.startPrank(strategist);
        PendleStrategy(myStrategy).rolloverPT(address(PT_ADDR2), address(PT_ADDR1), magicPTAmount, _callData);
        vm.stopPrank();

        uint256 _totalAssets = IStrategy(myStrategy).totalAssets();
        console.log("_totalAssets:%d", _totalAssets);
        assertTrue(_assertApproximateEq(_totalAssets, magicETHAmount, BIGGER_TOLERANCE));
        _checkBasicInvariants(address(stkVault));
    }

    function _createPendleStrategy() internal returns (address, address) {
        bytes memory _constructorArgs = abi.encode(wETH, address(stkVault), ETH_USD_FEED, ETH_USD_FEED_HEARTBEAT);
        address _deployedStrategy = deployWithCreationCodeAndConstructorArgs(
            ETH_PENDLE_STRATEGY_NAME, type(PendleStrategy).creationCode, _constructorArgs
        );

        assertEq(_deployedStrategy, ETH_PENDLE_STRATEGY_ADDRESS);

        vm.startPrank(stkVOwner);
        stkVault.addStrategy(_deployedStrategy, MAX_ETH_ALLOWED);
        vm.stopPrank();

        strategyOwner = PendleStrategy(_deployedStrategy).owner();

        address _routerAddr = pendleRouterV4;
        pendleHelper = new PendleHelper(_deployedStrategy, _routerAddr, address(swapper));
        swapper.setWhitelist(address(pendleHelper), true);

        vm.startPrank(strategyOwner);
        PendleStrategy(_deployedStrategy).setSwapper(address(swapper));
        PendleStrategy(_deployedStrategy).setPendleHelper(address(pendleHelper));
        vm.stopPrank();

        return (_deployedStrategy, PendleStrategy(_deployedStrategy).strategist());
    }

    function _addPTMarketWithIntermediateOracle(
        address _pendleMarket,
        address _underlyingYieldToken,
        address _underlyingOracle,
        address _intermediateOracle,
        uint32 _twapSeconds
    ) internal {
        vm.startPrank(strategyOwner);
        PendleStrategy(myStrategy).addPT(
            _pendleMarket,
            _underlyingYieldToken,
            _underlyingOracle,
            _intermediateOracle,
            _twapSeconds,
            uint32(Constants.ONE_YEAR) * 2 // make expiry test easier
        );
        vm.stopPrank();
    }

    function _zapInWithPendlePT(
        address _assetToken,
        address _strategy,
        address _pendlePT,
        address _pendleMarket,
        uint256 _assetAmount
    ) internal {
        bytes memory _callData = _getZapInCalldataFromSDK(_pendlePT, _assetAmount);

        vm.startPrank(strategist);
        PendleStrategy(myStrategy).buyPTWithAsset(_assetToken, _pendlePT, _assetAmount, _callData);
        vm.stopPrank();
    }

    function _stormOutFromPendlePT(
        address _assetToken,
        address _strategy,
        address _pendlePT,
        address _pendleMarket,
        uint256 _ptAmount
    ) internal {
        bytes memory _callData = _getStormOutCalldataFromSDK(_pendlePT, _ptAmount);
        vm.startPrank(strategist);
        PendleStrategy(myStrategy).sellPTForAsset(_assetToken, _pendlePT, _ptAmount, _callData);
        vm.stopPrank();
    }

    function _getZapInCalldataFromSDK(address _pendlePT, uint256 _assetAmount) internal view returns (bytes memory) {
        bytes memory _callData;
        if (_pendlePT == address(PT_ADDR1) && _assetAmount == magicETHAmount) {
            // slippage 1% with aggragator enabled
            _callData =
                hex"c81f847a000000000000000000000000e5323c4e20152de274dc6ec0ff0a32f91ceaa4d60000000000000000000000002b10cfffc3e49f4aae294d86072e5d2ec6332118000000000000000000000000000000000000000000000000111e060f757ce18b00000000000000000000000000000000000000000000000008a524ad4d7033da000000000000000000000000000000000000000000000000122799d255d2067d000000000000000000000000000000000000000000000000114a495a9ae067b4000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000280000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000112210f4768db400000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        } else if (_pendlePT == address(PT_ADDR2) && _assetAmount == magicETHAmount) {
            // slippage 1% with aggragator enabled
            _callData =
                hex"c81f847a000000000000000000000000e5323c4e20152de274dc6ec0ff0a32f91ceaa4d600000000000000000000000002c1289dacb6d459fc784236e862bc504c991f8100000000000000000000000000000000000000000000000011a91704a6e01c6800000000000000000000000000000000000000000000000008eb60f56b8da1be00000000000000000000000000000000000000000000000012bb1869c84306db00000000000000000000000000000000000000000000000011d6c1ead71b437c000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000112210f4768db400000000000000000000000000d9a442856c234a39a81a089c06451ebaa4306a72000000000000000000000000d4f480965d2347d421f1bec7f545682e5ec2151d00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b50000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009e4e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000d9a442856c234a39a81a089c06451ebaa4306a72000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000404c134a970000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000e0e0e08a6a4b9dc7bd67bcb7aade5cf48157d444000000000000000000000000000000000000000000000000112210f4768db40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca00000000000000000000000000000000000000000000346dc5d638865000000640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000408cc7a56b0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c863e0d47a6964ad1565345da9bfa66659f4983f020000000000000000000006810000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000d9a442856c234a39a81a089c06451ebaa4306a720000000000000000000000000000000000000000000000000e2d92f2d5d2197b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000112b62c238d0000000000000000105fc43b017de6b6000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000d9a442856c234a39a81a089c06451ebaa4306a72000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000112210f4768db4000000000000000000000000000000000000000000000000001035d94ee5511f480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec60000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000112210f4768db40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002847b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a22343736362e393139343536343930373135222c22416d6f756e744f7574555344223a22343738312e323931373836363430303135222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2231313739383737333835313031353032313334222c2254696d657374616d70223a313735333935343537342c22526f7574654944223a2263393438383766612d373438382d346166312d613966332d6462663766306431326165653a35346666653063662d613662362d343831332d393061322d313530353232633366353338222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a2252464c6f454c484c5743702f6e64425441597770636737774a4d503251466a4a3973777849526877586c67693070377970503845624d4e6d65572b76727a7a51506634315668556652362b6168477673527846744e6b57713953514578724d775465505a4149376c6e42792f415331525251363733525a546338466f6167494b66646d774e6372376f6c475779327568543149687770387865647836735a6864724d71526e6f2f4635666f576c4d5a613061684d4171434766445a7949645a54557a492f326c715645713964596b73715a4965473849626b454d534a3836743131566a664a765571753365486e4332745346426a624c5a66584b6e6551664365684f324c574c45413438656f77306b6d6e33763876474a6c496157785177706b4d7258534b68314f624a3579545873554877724c6552495838787767686c41336262576b537a7333432f593455412f4475616b6d6b773d3d227d7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        }
        return _callData;
    }

    function _getStormOutCalldataFromSDK(address _pendlePT, uint256 _ptAmount) internal view returns (bytes memory) {
        bytes memory _callData;
        if (_pendlePT == address(PT_ADDR1) && _ptAmount == magicPTAmount) {
            // slippage 1% with aggragator enabled
            _callData =
                hex"594a88cc000000000000000000000000e5323c4e20152de274dc6ec0ff0a32f91ceaa4d60000000000000000000000002b10cfffc3e49f4aae294d86072e5d2ec633211800000000000000000000000000000000000000000000000010a741a46278000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000105415511cc8aa4a000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        }
        return _callData;
    }

    function _redeemAfterPendlePTExpire(
        address _assetToken,
        address _strategy,
        address _pendlePT,
        address _ytToken,
        uint256 _ptAmount
    ) internal {
        bytes memory _callData = _getRedeemAfterExpireCalldataFromSDK(_pendlePT, _ptAmount);
        vm.startPrank(strategist);
        PendleStrategy(myStrategy).redeemPTForAsset(_assetToken, _pendlePT, _ptAmount, _callData);
        vm.stopPrank();
    }

    function _getRedeemAfterExpireCalldataFromSDK(address _pendlePT, uint256 _ptAmount)
        internal
        view
        returns (bytes memory)
    {
        bytes memory _callData;
        if (_pendlePT == address(PT_ADDR2) && _ptAmount == magicPTAmount) {
            // slippage 1% with aggragator enabled
            _callData =
                hex"47f1de22000000000000000000000000e5323c4e20152de274dc6ec0ff0a32f91ceaa4d6000000000000000000000000b1dd1a6f9a9f09867c7a128d99e4c1f9510d846600000000000000000000000000000000000000000000000010a741a4627800000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000001064a521eface419000000000000000000000000d9a442856c234a39a81a089c06451ebaa4306a72000000000000000000000000d4f480965d2347d421f1bec7f545682e5ec2151d00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b50000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000009e4e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000d9a442856c234a39a81a089c06451ebaa4306a72000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000408cc7a56b0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c863e0d47a6964ad1565345da9bfa66659f4983f02000000000000000000000681000000000000000000000000d9a442856c234a39a81a089c06451ebaa4306a720000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000000000000000000000000000102278b1b2dd414200000000000000000000000000000000000000000000000000000000000000404c134a970000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000e0e0e08a6a4b9dc7bd67bcb7aade5cf48157d4440000000000000000000000000000000000000000000000000dfa95cba2e82fa600000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca00000000000000000000000000000000000000000000346dc5d6388650000006400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000011b5d98ca98000000000000000010e3d0eca95ccbfb000000000000000000000000d9a442856c234a39a81a089c06451ebaa4306a72000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000102278b1b2dd414200000000000000000000000000000000000000000000000010b893f488f2e8a90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec60000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000102278b1b2dd414200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002837b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a22343638302e383138353632393933303231222c22416d6f756e744f7574555344223a22343639362e3935393233333338353637222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2231323137303436303339313932343536313837222c2254696d657374616d70223a313735333935343731332c22526f7574654944223a2238306136633562302d633738612d346233332d616365322d3636636633613564343734323a39613164616566662d353063322d346464322d623338382d313838316535376235613333222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a2241684f497245544a616c724373543853394a46482b704d746a63416b6d69574b383743616437766b7a6c2b4c3749446d776d31554a7a2b484b78452b597937774738696c3062515268716f637a6375735454374176614d47614451674c2b36716d682b5636756363697a6543304b43584b4750646a4d66434a4e2f6e58562f4c45355068342f6a634a6b366c7a2b7545506b2f46534879544b5662794d4f396c565571525665455570643754482f6f71646b4e6f723636506f31783352376a38644a506236326c6c594a45793149484c6b743443767a4d4b4152537a69314d64745679442b6232524c64725753424a626a6c5964684b682b4f32616e7733616167473853697063425a4b53547a53354b6f624d4d4230626d65516c50454c583044535270426359676465316f6a52544d754e30686e566b4a45412b306d49655a4971653751745853487731744557362b4731367554673d3d227d7d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        }
        return _callData;
    }

    function _removePTMarket(address _pendlePT, bytes memory _swapData) internal {
        vm.startPrank(strategyOwner);
        PendleStrategy(myStrategy).removePT(_pendlePT, _swapData);
        vm.stopPrank();
    }
}
