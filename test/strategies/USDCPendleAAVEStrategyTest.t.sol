// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.29;

import {Test, console} from "forge-std/Test.sol";
import {SparkleXVault} from "../../src/SparkleXVault.sol";
import {PendleAAVEStrategy} from "../../src/strategies/aave/PendleAAVEStrategy.sol";
import {AAVEHelper} from "../../src/strategies/aave/AAVEHelper.sol";
import {TokenSwapper} from "../../src/utils/TokenSwapper.sol";
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {Vm} from "forge-std/Vm.sol";
import {IWithdrawRequestNFT} from "../../interfaces/etherfi/IWithdrawRequestNFT.sol";
import {IPool} from "../../interfaces/aave/IPool.sol";
import {IAaveOracle} from "../../interfaces/aave/IAaveOracle.sol";
import {IPriceOracleGetter} from "../../interfaces/aave/IPriceOracleGetter.sol";
import {TestUtils} from "../TestUtils.sol";
import {Constants} from "../../src/utils/Constants.sol";
import {IPAllActionV3} from "@pendle/contracts/interfaces/IPAllActionV3.sol";
import {IPPrincipalToken} from "@pendle/contracts/interfaces/IPPrincipalToken.sol";
import {IPMarketV3} from "@pendle/contracts/interfaces/IPMarketV3.sol";
import {PendleHelper} from "../../src/strategies/pendle/PendleHelper.sol";
import {DummyDEXRouter} from "../mock/DummyDEXRouter.sol";
import {BasePendleStrategyTest} from "./BasePendleStrategyTest.t.sol";

// run this test with mainnet fork
// forge test --fork-url <rpc_url> --match-path USDCPendleAAVEStrategyTest -vvv
contract USDCPendleAAVEStrategyTest is BasePendleStrategyTest {
    AAVEHelper public aaveHelper;
    address public aaveHelperOwner;
    uint256 public magicUSDCAmountLeveraged = 9000000000; //9000e6
    uint256 public magicUSDCAmountCollect = 365000000; //365e6
    uint256 public magicPTAmountRedeemed = 200000000000000000000; //200e18
    uint256 public magicPTAmountCollected = 3600000000000000000000; //3600e18
    uint256 public magicPTAmountCollectAll = 6400000000000000000000; //6400e18

    ///////////////////////////////
    // Note this address is only meaningful for this test
    ///////////////////////////////
    address public constant PENDLE_AAVE_STRATEGY_ADDRESS = 0xf10b150ae0c2D2C0dF82AE181dBcF2eA71573401;
    string public constant PENDLE_AAVE_STRATEGY_NAME = "sparklex.pendle.aave.strategy";

    ///////////////////////////////
    // mainnet pendle PT pools: active
    ///////////////////////////////
    IPool aavePool = IPool(0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2);
    address public constant sUSDe = 0x9D39A5DE30e57443BfF2A8307A4256c8797A3497;
    address public constant sUSDe_FEED = 0xFF3BC18cCBd5999CE63E788A1c250a88626aD099;

    // USDe JUL31 market
    IPPrincipalToken PT_ADDR3 = IPPrincipalToken(0x917459337CaAC939D41d7493B3999f571D20D667);
    address YT_ADDR3 = 0x733Ee9Ba88f16023146EbC965b7A1Da18a322464;
    IPMarketV3 MARKET_ADDR3 = IPMarketV3(0x9Df192D13D61609D1852461c4850595e1F56E714);
    address constant PT3_Whale = 0xBBBBBbbBBb9cC5e90e3b3Af64bdAF62C37EEFFCb;
    address constant YIELD_TOKEN_FEED3 = 0xa569d910839Ae8865Da8F8e70FfFb0cBA869F961;
    uint256 public constant USDC_TO_PT3_DUMMY_PRICE = 1005000000000000000; //1.005
    address public constant UNDERLYING_YIELD_ADDR3 = 0x4c9EDD5852cd905f086C759E8383e09bff1E68B3;

    // sUSDe JUL31 market
    address public constant PT_ATOKEN_ADDR1 = 0xDE6eF6CB4aBd3A473ffC2942eEf5D84536F8E864;
    // USDe JUL31 market
    address public constant PT_ATOKEN_ADDR3 = 0x312ffC57778CEfa11989733e6E08143E7E229c1c;

    function setUp() public {
        stkVault = new SparkleXVault(ERC20(usdc), "SparkleXVault", "SPXV");
        stkVOwner = stkVault.owner();
        _changeWithdrawFee(stkVOwner, address(stkVault), 0);

        vm.startPrank(stkVOwner);
        stkVault.setEarnRatio(Constants.TOTAL_BPS);
        vm.stopPrank();

        swapper = new TokenSwapper();
        mockRouter = new DummyDEXRouter();
    }

    function test_GetMaxLTV() public {
        (myStrategy, strategist) = _createPendleStrategy(true);
        uint256 _ltv = aaveHelper.getMaxLTV();
        assertEq(_ltv, 9000);
    }

    function test_Basic_Flow_PendleAAVE(uint256 _testVal) public {
        (myStrategy, strategist) = _createPendleStrategy(false);
        _fundFirstDepositGenerouslyWithERC20(mockRouter, address(stkVault), usdcPerETH);
        address _user = TestUtils._getSugarUser();

        TestUtils._makeVaultDepositWithMockRouter(
            mockRouter, address(stkVault), _user, usdcPerETH, _testVal, 10 ether, 100 ether
        );

        uint256 _initSupply = magicUSDCAmount;
        uint256 _initDebt = magicUSDCAmountLeveraged; //aaveHelper.previewLeverageForInvest(_initSupply, _initDebt);

        bytes memory _prepareCALLDATA = _getZapInCalldataFromSDK(address(PT_ADDR1), magicUSDCAmount);
        bytes memory _flCALLDATA = _getZapInCalldataFromSDK(address(PT_ADDR1), _initDebt);

        vm.startPrank(strategist);
        PendleAAVEStrategy(myStrategy).invest(
            _initSupply, _initDebt, abi.encode(_prepareCALLDATA, _initDebt, _flCALLDATA)
        );
        vm.stopPrank();

        _printAAVEPosition();
        (uint256 _netSupply, uint256 _debt, uint256 _totalSupply) =
            PendleAAVEStrategy(myStrategy).getNetSupplyAndDebt(true);
        assertTrue(_assertApproximateEq(_totalSupply, (_initSupply + _initDebt), 20 * MIN_SHARE));
        _checkBasicInvariants(address(stkVault));

        (, uint256 _debtInSupply, uint256 _totalInSupply) = PendleAAVEStrategy(myStrategy).getNetSupplyAndDebt(false);

        uint256 _toRedeem = magicPTAmountRedeemed; //aaveHelper.getMaxRedeemableAmount();
        assertTrue(_toRedeem < type(uint256).max);
        bytes memory _redeemCALLDATA = _getStormOutCalldataFromSDK(address(PT_ADDR1), _toRedeem);

        vm.startPrank(strategist);
        PendleAAVEStrategy(myStrategy).redeem(_toRedeem, _redeemCALLDATA);
        vm.stopPrank();

        (, uint256 _debtInSupply2, uint256 _totalInSupply2) = PendleAAVEStrategy(myStrategy).getNetSupplyAndDebt(false);
        assertTrue(_assertApproximateEq(_totalInSupply, (_totalInSupply2 + _toRedeem), 10 * BIGGER_TOLERANCE));
        console.log("_debtInSupply:%d,_debtInSupply2:%d", _debtInSupply, _debtInSupply2);
        assertTrue(_assertApproximateEq(_debtInSupply, (_debtInSupply2 + _toRedeem), 10 * BIGGER_TOLERANCE));

        _printAAVEPosition();
        _checkBasicInvariants(address(stkVault));

        uint256[] memory _previewPortionCollect = aaveHelper.previewCollect(magicUSDCAmountCollect);
        assertEq(5, _previewPortionCollect.length);
        console.log(
            "_previewPortionCollect[0]:%d,_previewPortionCollect[4]:%d",
            _previewPortionCollect[0],
            _previewPortionCollect[4]
        );

        bytes memory _collectCALLDATA = _getStormOutCalldataFromSDK(address(PT_ADDR1), magicPTAmountCollected);
        uint256 _vaultBalance = ERC20(usdc).balanceOf(address(stkVault));
        vm.startPrank(swapper.owner());
        swapper.setSlippage(9500);
        vm.stopPrank();
        vm.startPrank(strategist);
        PendleAAVEStrategy(myStrategy).collect(magicUSDCAmountCollect, _collectCALLDATA);
        vm.stopPrank();
        uint256 _vaultBalanceAfter = ERC20(usdc).balanceOf(address(stkVault));
        console.log("_vaultBalance:%d,_vaultBalanceAfter:%d", _vaultBalance, _vaultBalanceAfter);
        assertTrue(_assertApproximateEq(magicUSDCAmountCollect, (_vaultBalanceAfter - _vaultBalance), 100 * MIN_SHARE));
        _checkBasicInvariants(address(stkVault));

        (,, _totalInSupply) = PendleAAVEStrategy(myStrategy).getNetSupplyAndDebt(false);
        console.log("_totalInSupply:%d", _totalInSupply);
        bytes memory _collectAllCALLDATA = _getStormOutCalldataFromSDK(address(PT_ADDR1), magicPTAmountCollectAll);
        vm.startPrank(strategist);
        PendleAAVEStrategy(myStrategy).collectAll(_collectAllCALLDATA);
        vm.stopPrank();
        _checkBasicInvariants(address(stkVault));
    }

    function test_Change_PT_Supply(uint256 _testVal) public {
        (myStrategy, strategist) = _createPendleStrategy(true);
        _fundFirstDepositGenerouslyWithERC20(mockRouter, address(stkVault), usdcPerETH);
        address _user = TestUtils._getSugarUser();

        TestUtils._makeVaultDepositWithMockRouter(
            mockRouter, address(stkVault), _user, usdcPerETH, _testVal, 10 ether, 100 ether
        );

        uint256 _initSupply = magicUSDCAmount;
        uint256 _initDebt = magicUSDCAmountLeveraged; //aaveHelper.previewLeverageForInvest(_initSupply, _initDebt);

        bytes memory _prepareCALLDATA =
            _generateSwapCalldataForBuy(myStrategy, address(MARKET_ADDR1), 0, magicUSDCAmount);
        bytes memory _flCALLDATA = _generateSwapCalldataForBuy(myStrategy, address(MARKET_ADDR1), 0, _initDebt);
        _prepareSwapForMockRouter(mockRouter, usdc, address(PT_ADDR1), PT1_Whale, USDC_TO_PT1_DUMMY_PRICE);
        vm.startPrank(strategist);
        PendleAAVEStrategy(myStrategy).invest(
            _initSupply, _initDebt, abi.encode(_prepareCALLDATA, _initDebt, _flCALLDATA)
        );
        vm.stopPrank();
        _checkBasicInvariants(address(stkVault));

        (,, uint256 _totalInSupply) = PendleAAVEStrategy(myStrategy).getNetSupplyAndDebt(false);
        bytes memory _collectAllCALLDATA =
            _generateSwapCalldataForSell(myStrategy, address(MARKET_ADDR1), 0, _totalInSupply);
        _prepareSwapForMockRouter(
            mockRouter,
            address(PT_ADDR1),
            usdc,
            usdcWhale,
            (Constants.ONE_ETHER * Constants.ONE_ETHER / USDC_TO_PT1_DUMMY_PRICE)
        );
        uint256 _vaultBalance = ERC20(usdc).balanceOf(address(stkVault));
        vm.startPrank(strategist);
        PendleAAVEStrategy(myStrategy).collectAll(_collectAllCALLDATA);
        vm.stopPrank();
        uint256 _vaultBalanceAfter = ERC20(usdc).balanceOf(address(stkVault));
        console.log("_vaultBalance:%d,_vaultBalanceAfter:%d", _vaultBalance, _vaultBalanceAfter);
        assertTrue(_assertApproximateEq(magicUSDCAmount, (_vaultBalanceAfter - _vaultBalance), 10 * MIN_SHARE));
        _checkBasicInvariants(address(stkVault));
        (,, _totalInSupply) = PendleAAVEStrategy(myStrategy).getNetSupplyAndDebt(false);
        assertEq(0, _totalInSupply);
        assertEq(0, ERC20(address(PT_ADDR1)).balanceOf(myStrategy));

        // change to new PT
        vm.startPrank(aaveHelper.owner());
        aaveHelper.setTokens(ERC20(address(PT_ADDR3)), ERC20(usdc), ERC20(PT_ATOKEN_ADDR3), 10);
        vm.stopPrank();
        vm.startPrank(PendleAAVEStrategy(myStrategy).owner());
        PendleAAVEStrategy(myStrategy).setPendleMarket(address(MARKET_ADDR3));
        vm.stopPrank();
        assertEq(9010, aaveHelper.getMaxLTV());

        _prepareCALLDATA = _generateSwapCalldataForBuy(myStrategy, address(MARKET_ADDR3), 0, magicUSDCAmount);
        _flCALLDATA = _generateSwapCalldataForBuy(myStrategy, address(MARKET_ADDR3), 0, _initDebt);
        _prepareSwapForMockRouter(mockRouter, usdc, address(PT_ADDR3), PT3_Whale, USDC_TO_PT3_DUMMY_PRICE);
        vm.startPrank(strategist);
        PendleAAVEStrategy(myStrategy).invest(
            _initSupply, _initDebt, abi.encode(_prepareCALLDATA, _initDebt, _flCALLDATA)
        );
        vm.stopPrank();
        _checkBasicInvariants(address(stkVault));
        (,, uint256 _totalInAsset) = PendleAAVEStrategy(myStrategy).getNetSupplyAndDebt(true);
        _assertApproximateEq(_totalInAsset, (_initSupply + _initDebt), 1 * MIN_SHARE);
    }

    function _printAAVEPosition() internal view returns (uint256, uint256) {
        (uint256 _cBase, uint256 _dBase, uint256 _leftBase, uint256 _liqThresh, uint256 _ltv, uint256 _healthFactor) =
            aavePool.getUserAccountData(address(myStrategy));
        console.log("_ltv:%d,_liqThresh:%d,_healthFactor:%d", _ltv, _liqThresh, _healthFactor);
        console.log("_cBase:%d,_dBase:%d,_leftBase:%d", _cBase, _dBase, _leftBase);
        return (_ltv, _healthFactor);
    }

    function _getZapInCalldataFromSDK(address _pendlePT, uint256 _assetAmount) internal view returns (bytes memory) {
        bytes memory _callData;
        if (_pendlePT == address(PT_ADDR1) && _assetAmount == magicUSDCAmount) {
            // slippage 1% with aggragator enabled
            _callData =
                hex"";
        } else if (_pendlePT == address(PT_ADDR1) && _assetAmount == magicUSDCAmountLeveraged) {
            // slippage 1% with aggragator enabled
            _callData =
                hex"";
        }
        return _callData;
    }

    function _getStormOutCalldataFromSDK(address _pendlePT, uint256 _ptAmount) internal view returns (bytes memory) {
        bytes memory _callData;
        if (_pendlePT == address(PT_ADDR1) && _ptAmount == magicPTAmountRedeemed) {
            // slippage 1% with aggragator enabled
            _callData =
                hex"594a88cc000000000000000000000000f10b150ae0c2d2c0df82ae181dbcf2ea715734010000000000000000000000004339ffe2b7592dc783ed13cce310531ab366deac00000000000000000000000000000000000000000000000ad78ebc5ac620000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000006a0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000bb03fe10000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000d4e9b0d466789d7f6201442eeccba6a75a552db000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000060000000000000000000000006a000f20005980200259b80c51020030400010680000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000004a4e3ead59e000000000000000000000000000010036c0190e009a000d0fc3541100a07380a0000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000094db1f66ee565a2cb000000000000000000000000000000000000000000000000000000000bec1832000000000000000000000000000000000000000000000000000000000c0aec7bc3d34ea689c0445eb6df60dc3d2b8544000000000000000000000000015a98b0000000000000000000000000888888888889758f76e7103c6cbf23abbf58f94600000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003009995855c00494d039ab6792f18e368e530dff9310000014000840024ff00000b00000000000000000000000000000000000000000000000000000000f196187f0000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000346dc5d638865000000c800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094db1f66ee565a2cb000000000000000000000000000000000000000000000000400065a8177fae2700000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010036c0190e009a000d0fc3541100a07380a9995855c00494d039ab6792f18e368e530dff9310000014000840000ff00000300000000000000000000000000000000000000000000000000000000f196187f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000053e2d6238da3000000320000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000c0a54920000000000000000000000000000000000000000ffff9a5889f795069a41a8a3000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000006a000f20005980200259b80c5102003040001068000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        } else if (_pendlePT == address(PT_ADDR1) && _ptAmount == magicPTAmountCollected) {
            // slippage 1% with aggragator enabled
            _callData =
                hex"594a88cc000000000000000000000000f10b150ae0c2d2c0df82ae181dbcf2ea715734010000000000000000000000004339ffe2b7592dc783ed13cce310531ab366deac0000000000000000000000000000000000000000000000c328093e61ee40000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000da0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000d255bbcb0000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000d4e9b0d466789d7f6201442eeccba6a75a552db000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000ba4e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000006a000000000000000000000000000000000000000000000000000000000000008e000000000000000000000000000000000000000000000000000000000000005e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000007fffffff0000000000000000000000000000000000000000000000000000000000000580000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000040d90ce4910000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001000000000000000000000000003cef1afc0e8324b57293a6e7ce663781bbefbb790000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000a3931d71877c0e7a3148cb7eb4463524fec27fbd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000a7752310d2ac96dbd3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040d90ce49100000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000836fe54625be242bcfa286207795405ca4fd10000000000000000000000000a3931d71877c0e7a3148cb7eb4463524fec27fbd000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000babacad58332b25c760000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000404c134a970000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000e0e0e08a6a4b9dc7bd67bcb7aade5cf48157d44400000000000000000000000000000000000000000000000000000000d8ab18fa000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000053e2d6238da30000003200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000e33000000000000000000000000d8b56c270000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000000000000000000000000000a7752310d2ac96dbd300000000000000000000000000000000000000000000000000000000d68aa5f30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000a7752310d2ac96dbd3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000027d7b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a22333634302e39363433343136323332303334222c22416d6f756e744f7574555344223a22333633382e35303330343034373434323334222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2233363335373638333539222c2254696d657374616d70223a313735303035373033382c22526f7574654944223a2231626333643632322d626430382d346530362d383634622d6238326330613464626635383a36376638343464302d396235352d346130302d396330352d373037306234366338336466222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a2245756f444935616e755a78615069634c394a4a5279327235642b58434b505756697466426477323161646a667835727248786e733871674d6c4e2f3253707536356d486f4f472f7a41526f7344324e685a314c584268756545573755706c38764a643458596e79566f3473566d5749626f4f366f6443524e797055617357666e2f555656646d366c5053564e657933415856687576374577326c686a4e67364f596e30386f75366b7934424c726b4c345a6c447a63756b56383654717674696c664542462b644c773079795359714c65426d51445a76385349535a314b706957442f6e6f336d5a46474c52766a4b706e7a494866706b6943724b766c38735841536b516d314b577a5a6f544a6751624f686e4850646e356c4a797349413637737551645a6772547249664c684864644532334e7a6675324969326a4151556c7a6e3342767358334b39777130554f6f5663636f706a513d3d227d7d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        } else if (_pendlePT == address(PT_ADDR1) && _ptAmount == magicPTAmountCollectAll) {
            // slippage 1% with aggragator enabled
            _callData =
                hex"594a88cc000000000000000000000000f10b150ae0c2d2c0df82ae181dbcf2ea715734010000000000000000000000004339ffe2b7592dc783ed13cce310531ab366deac00000000000000000000000000000000000000000000015af1d78b58c400000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000175e577640000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000d4e9b0d466789d7f6201442eeccba6a75a552db000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000c04e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000009400000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec60000000000000000000000007eb59373d63627be64b42406b108b602174b4ccc0000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000129b3e8ff76a2c571e300000000000000000000000000000000000000000000000000000001000276a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000408bf36a3b0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000004444c5dc75cb358380d2e3de08a9000000000000000000000000000000000000000000000000000000001812af3b0000000000000000000000000000000000022d473030f116ddee9f6b43ac78ba3000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000004440854b2d02c57a0dc5c58b7a884562d875c0c400000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000001ce338ad30000000000000000000000000000000000000000000000010009ffaf3ba0fb060000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000684fc84f00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000416e074f882c279a8bb5d6ea3513f6ebb2f3569eb83beab286834c00a64b1c1a511c740084f9007f16b73e52b10fa3cf2d86a40c08733d34cbfbc667fd8481389d1c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000193f0000000000000000000000018139fee40000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000129b3e8ff76a2c571e3000000000000000000000000000000000000000000000000000000017d5fd0d20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec60000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000129b3e8ff76a2c571e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000027a7b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a22363436352e383330313536303931363839222c22416d6f756e744f7574555344223a22363436312e3133363337343933343132222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2236343633303238393634222c2254696d657374616d70223a313735303035383930372c22526f7574654944223a2234353864363164342d633839382d343033632d623837662d3935366262363234333061653a65386636343761662d383935632d346431632d393137342d316164346566353439353837222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22475848346f7666587451746e4638774746477055794f426d65416435754d7378554f61626156454a666a6b44726c693264512b5247536452502b774e59573768624636554956413348396661734747386350635650556b3465555a3847533879657966624b6759474f5a4a6f70672f79483676797261326f3168554c3664445a597662435a4d4245646c5a55395930505255495a39693149463963756f714a2f7130584447683377502f4f6c3336456447736843344231636f376a61476e33453371305038712f506d694462594c75645a374353635278456455465961536d723643754e55734649776f41665155526b6849514d565842554f6739546e47574547333364506e78666450456652775670392f52316d6758426b7542666976424a43546a6a61462f686c694c422b2f6e777832466e376577425432615045486e616c30533166324964596374707a3931745767666f6d413d3d227d7d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        }
        return _callData;
    }

    function _createPendleStrategy(bool _useMockRouter) internal returns (address, address) {
        bytes memory _constructorArgs = abi.encode(usdc, address(stkVault), USDC_USD_Feed);
        address _deployedStrategy = deployWithCreationCodeAndConstructorArgs(
            PENDLE_AAVE_STRATEGY_NAME, type(PendleAAVEStrategy).creationCode, _constructorArgs
        );

        assertEq(_deployedStrategy, PENDLE_AAVE_STRATEGY_ADDRESS);

        aaveHelper = new AAVEHelper(_deployedStrategy, ERC20(address(PT_ADDR1)), ERC20(usdc), ERC20(PT_ATOKEN_ADDR1), 8);
        aaveHelperOwner = aaveHelper.owner();

        vm.startPrank(stkVOwner);
        stkVault.addStrategy(_deployedStrategy, 100);
        vm.stopPrank();

        strategyOwner = PendleAAVEStrategy(_deployedStrategy).owner();

        address _routerAddr = (_useMockRouter ? address(mockRouter) : pendleRouterV4);
        pendleHelper = new PendleHelper(_deployedStrategy, _routerAddr, address(swapper));

        vm.startPrank(strategyOwner);
        PendleAAVEStrategy(_deployedStrategy).setSwapper(address(swapper));
        PendleAAVEStrategy(_deployedStrategy).setAAVEHelper(address(aaveHelper));
        PendleAAVEStrategy(_deployedStrategy).setPendleHelper(address(pendleHelper));
        PendleAAVEStrategy(_deployedStrategy).setPendleMarket(address(MARKET_ADDR1));
        vm.stopPrank();

        return (_deployedStrategy, PendleAAVEStrategy(_deployedStrategy).strategist());
    }
}
