// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.29;

import {Test, console} from "forge-std/Test.sol";
import {SparkleXVault} from "../../src/SparkleXVault.sol";
import {TokenSwapper} from "../../src/utils/TokenSwapper.sol";
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Vm} from "forge-std/Vm.sol";
import {TestUtils} from "../TestUtils.sol";
import {Constants} from "../../src/utils/Constants.sol";
import {IPAllActionV3} from "@pendle/contracts/interfaces/IPAllActionV3.sol";
import {IPPrincipalToken} from "@pendle/contracts/interfaces/IPPrincipalToken.sol";
import {IPMarketV3} from "@pendle/contracts/interfaces/IPMarketV3.sol";
import {IPRouterStatic} from "@pendle/contracts/interfaces/IPRouterStatic.sol";

// run this test with mainnet fork
// forge coverage --fork-url <rpc_url> --match-path USDCPendleStrategyTest -vvv --no-match-coverage "(script|test)"
contract USDCPendleStrategyTest is TestUtils {
    SparkleXVault public stkVault;
    address public stkVOwner;
    address public strategist;
    TokenSwapper public swapper;

    address usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
    address usdcWhale = 0x37305B1cD40574E4C5Ce33f8e8306Be057fD7341; //sky:PSM

    // check https://github.com/pendle-finance/pendle-core-v2-public/blob/main/deployments/1-core.json
    IPRouterStatic pendleRouterStatic = IPRouterStatic(0x263833d47eA3fA4a30f269323aba6a107f9eB14C);

    // mainnet chainlink aggregator
    address constant USDC_USD_Feed = 0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6;
    address constant sUSDe_USD_Feed = 0xFF3BC18cCBd5999CE63E788A1c250a88626aD099;

    // mainnet pendle PT pool
    IPPrincipalToken sUSDeJUL31_PT = IPPrincipalToken(0x3b3fB9C57858EF816833dC91565EFcd85D96f634);
    IPMarketV3 sUSDeJUL31_Market = IPMarketV3(0x4339Ffe2B7592Dc783ed13cCE310531aB366dEac);
    bytes4 constant TARGET_SELECTOR_PENDLE = hex"c81f847a"; //swapExactTokenForPt()

    function setUp() public {
        stkVault = new SparkleXVault(ERC20(usdc), "SparkleXVault", "SPXV");
        stkVOwner = stkVault.owner();

        swapper = new TokenSwapper();
    }

    function test_SwapForPT() public {
        assertFalse(sUSDeJUL31_PT.isExpired());

        uint256 _testVal = 1000e6;
        uint256 _slippageAllowed = 9950;

        // check https://docs.pendle.finance/Developers/FAQ#how-do-i-fetch-the-pt-price
        uint256 _pt2AssetRate = pendleRouterStatic.getPtToAssetRate(address(sUSDeJUL31_Market));
        (int256 _usdcUsdPrice,) = swapper.getPriceFromChainLink(USDC_USD_Feed);
        (int256 _sUSDeUSDPrice,) = swapper.getPriceFromChainLink(sUSDe_USD_Feed);
        // check https://docs.pendle.finance/Developers/Contracts/StandardizedYield#standard-sys
        uint256 _asset2SYRate = uint256(_usdcUsdPrice * 1e18 / _sUSDeUSDPrice);
        uint256 _sUSDePT2SYRate = swapper.getPTPriceInSYFromPendle(address(sUSDeJUL31_Market), 0);
        uint256 _sUSDe2USDCRate = _sUSDePT2SYRate * 1e18 / _asset2SYRate;

        console.log(
            "_asset2SYRate:%d,_sUSDePT2SYRate:%d,_sUSDe2USDCRate:%d", _asset2SYRate, _sUSDePT2SYRate, _sUSDe2USDCRate
        );
        assertTrue(_assertApproximateEq(_pt2AssetRate, _sUSDe2USDCRate, BIGGER_TOLERANCE));

        // call SDK to get bytes
        uint256 _minOut = 913658521822428953199; // max allowed slippage set in SDK with 10%
        bytes memory _callData =
            hex"c81f847a00000000000000000000000037305b1cd40574e4c5ce33f8e8306be057fd73410000000000000000000000004339ffe2b7592dc783ed13cce310531ab366deac000000000000000000000000000000000000000000000031878f20d3c25c7a6f00000000000000000000000000000000000000000000001b8433123cc14fd23e0000000000000000000000000000000000000000000000528c9936b643ef76ba00000000000000000000000000000000000000000000003708662479829fa47c000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000cc0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000d4e9b0d466789d7f6201442eeccba6a75a552db000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a24e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000007400000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000404c134a970000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000e0e0e08a6a4b9dc7bd67bcb7aade5cf48157d444000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000053e2d6238da30000003200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec60000000000000000000000007eb59373d63627be64b42406b108b602174b4ccc000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000000000000000000000000000000000003b91089e000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d250000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000003060f31dec048000000000000002e23355ab5297ddea7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000002986166b3ca557aec90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec60000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002867b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a223939372e30333334363035343036353037222c22416d6f756e744f7574555344223a223939382e31323733303834363738323938222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a22383531303837323631303839383634323132313335222c2254696d657374616d70223a313734383336303030392c22526f7574654944223a2263313766303334382d656535622d346633332d626337382d3434613565643466633462353a63666336346435352d643463302d343262322d383137372d363835323537623061613939222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22444350776d517a42326e792b693770584c624f7634786366736351733957552f536a6e4a4e7970666a642b5a694e4467456945335835773662567030664d42446e48562f486179594e66675739724f63726659724f6371674b515a5431736648696f456f4b2f647739525251663573434a324f6d426f42445231534561324a41677152534b35442b784a46314d5a504b726d3375645734364674796d6e71353038344b3138795667533348786e2f344e616c4d2f326b726474493679686b58475232394c594a45665a2f475a6e53364e7a2f6145625950526636394c677a7467747a6f347559444a334a4a76746a38586e71706d62716c487671447832727a626553423533484c68476f5a6842514d7162503367534a3648543063634739523162716e576555474d70674658507061593566434f6b466b4e744430447a4b665554364938364569736972613456776f51344c517355773d3d227d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        assertEq(TARGET_SELECTOR_PENDLE, bytes4(_callData)); //(_callData[:4])

        vm.startPrank(usdcWhale);
        ERC20(usdc).approve(address(swapper), type(uint256).max);
        uint256 ptOut = swapper.swapWithPendleRouter(usdc, address(sUSDeJUL31_PT), _testVal, _minOut, _callData);
        vm.stopPrank();

        console.log("_pt2AssetRate:%d,ptOut:%d", _pt2AssetRate, ptOut);

        assertTrue(
            _assertApproximateEq((_testVal * 1e18 * 1e18 / (1e6 * _pt2AssetRate)), ptOut, BIGGER_TOLERANCE * 100)
        );
    }
}
