// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.29;

import {Test, console} from "forge-std/Test.sol";
import {SparkleXVault} from "../../../src/SparkleXVault.sol";
import {TokenSwapper} from "../../../src/utils/TokenSwapper.sol";
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {Vm} from "forge-std/Vm.sol";
import {TestUtils} from "../../TestUtils.sol";
import {Constants} from "../../../src/utils/Constants.sol";
import {IPAllActionV3} from "@pendle/contracts/interfaces/IPAllActionV3.sol";
import {IPPrincipalToken} from "@pendle/contracts/interfaces/IPPrincipalToken.sol";
import {IPYieldToken} from "@pendle/contracts/interfaces/IPYieldToken.sol";
import {IPMarketV3} from "@pendle/contracts/interfaces/IPMarketV3.sol";
import {IPMarket} from "@pendle/contracts/interfaces/IPMarket.sol";
import {IPRouterStatic} from "@pendle/contracts/interfaces/IPRouterStatic.sol";
import {IStrategy} from "../../../interfaces/IStrategy.sol";
import {PendleHelper} from "../../../src/strategies/pendle/PendleHelper.sol";
import {BasePendleStrategyTest} from "../BasePendleStrategyTest.t.sol";
import {DummyDEXRouter} from "../../mock/DummyDEXRouter.sol";
import {PendleStrategy} from "../../../src/strategies/pendle/PendleStrategy.sol";
import {IOracleAggregatorV3} from "../../../interfaces/chainlink/IOracleAggregatorV3.sol";

interface IERC4626Vault {
    function convertToAssets(uint256 _share) external view returns (uint256);
    function decimals() external view returns (uint256);
}

// run this test with bnb chain fork
// forge coverage --fork-url <rpc_url> --match-path BscUSDCPendleStrategyTest -vvv --no-match-coverage "(script|test)"
contract BscUSDCPendleStrategyTest is BasePendleStrategyTest {
    ///////////////////////////////
    // Note this address is only meaningful for this test
    ///////////////////////////////
    address public constant BSC_PENDLE_STRATEGY_ADDRESS = 0x2F7CdCFe33194E4b00c8a42D6c106d2bCB9b55b5;
    string public constant BSC_PENDLE_STRATEGY_NAME = "sparklex.pendle.strategy.bsc";

    function setUp() public {
        _createForkBNBChain(55245113);

        MAX_USDC_ALLOWED = 10000000 * Constants.ONE_ETHER;
        wETH = payable(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c); // wBNB
        usdcPerETH = 600e18;
        magicUSDCAmount = 1234567890e12;
        usdc = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;
        USDC_USD_Feed = 0x51597f405303C4377E36123cBc172b13269EA163;
        usdcWhale = 0xF977814e90dA44bFA03b6295A0616a897441aceC; //binance hot wallet
        // check https://github.com/pendle-finance/pendle-core-v2-public/blob/main/deployments/56-core.json
        pendleRouterStatic = IPRouterStatic(0x2700ADB035F82a11899ce1D3f1BF8451c296eABb);
        pendleRouterV4 = 0x888888888889758F76e7103c6CbF23ABbF58F946;

        ///////////////////////////////
        // BNB Chain pendle PT pools: active
        ///////////////////////////////
        // sUSDX SEP01 market
        PT_ADDR1 = IPPrincipalToken(0xfA56005cdf111725A8e5395fc90Cd33135BcCAE8);
        YT_ADDR1 = 0x74a5AfDe0aE6ab639cE3826fFa33efD7e636092E;
        MARKET_ADDR1 = IPMarketV3(0xE08fC3054450053cd341da695f72b18E6110ffFC);
        PT1_Whale = 0xA3c9E754032A4A2C315538cF13029E6f99Ac5AbA;
        YIELD_TOKEN_FEED1 = 0x4BAD96DD1C7D541270a0C92e1D4e5f12EEEA7a57; // USDX oracle
        UNDERLYING_YIELD_ADDR1 = 0x7788A3538C5fc7F9c7C8A74EAC4c898fC8d87d92; // sUSDX

        // USR NOV27 market
        PT_ADDR2 = IPPrincipalToken(0x4a3846d069B800343D53e72B80a644Bb496D9aB2);
        YT_ADDR2 = 0xDCf4f4260ab766FD458E4D883ddf01522A7e4BB8;
        MARKET_ADDR2 = IPMarketV3(0x1630d8228588d406767C2225F927154c05d2E2bb);
        PT2_Whale = 0x41a9a73b81F0440b7033ac2EE596DFb4Abb524E2;
        YIELD_TOKEN_FEED2 = 0xE8ed18E29402CD223bC5B73D30e40CCdf7b72986;
        UNDERLYING_YIELD_ADDR2 = 0x2492D0006411Af6C8bbb1c8afc1B0197350a79e9;

        stkVault = new SparkleXVault(ERC20(usdc), "SparkleXVault", "SPXV");
        stkVOwner = stkVault.owner();

        vm.startPrank(stkVOwner);
        stkVault.setEarnRatio(Constants.TOTAL_BPS);
        vm.stopPrank();

        swapper = new TokenSwapper();
        mockRouter = new DummyDEXRouter();
    }

    function test_BNBChain_Pendle_InOut(uint256 _testVal) public {
        (myStrategy, strategist) = _createPendleStrategy();

        _prepareSwapForMockRouter(mockRouter, wETH, usdc, usdcWhale, usdcPerETH);
        _fundFirstDepositGenerouslyWithERC20(mockRouter, address(stkVault), usdcPerETH);

        address _user = TestUtils._getSugarUser();

        TestUtils._makeVaultDepositWithMockRouter(
            mockRouter, address(stkVault), _user, usdcPerETH, _testVal, 3 ether, 10 ether
        );

        _addPTMarketWithIntermediateOracle(
            address(MARKET_ADDR1), UNDERLYING_YIELD_ADDR1, UNDERLYING_YIELD_ADDR1, YIELD_TOKEN_FEED1, 0
        );
        _zapInWithPendlePT(usdc, myStrategy, address(PT_ADDR1), address(MARKET_ADDR1), magicUSDCAmount);
        _checkBasicInvariants(address(stkVault));
        uint256 _totalAssetsInStrategy = IStrategy(myStrategy).totalAssets();
        assertTrue(_assertApproximateEq(_totalAssetsInStrategy, magicUSDCAmount, 5 * Constants.ONE_ETHER));

        _stormOutFromPendlePT(usdc, myStrategy, address(PT_ADDR1), address(MARKET_ADDR1), magicPTAmount);
        _checkBasicInvariants(address(stkVault));
        _totalAssetsInStrategy = IStrategy(myStrategy).totalAssets();
        assertTrue(_assertApproximateEq(_totalAssetsInStrategy, magicUSDCAmount, 5 * Constants.ONE_ETHER));

        _addPTMarketWithIntermediateOracle(
            address(MARKET_ADDR2), UNDERLYING_YIELD_ADDR2, YIELD_TOKEN_FEED2, Constants.ZRO_ADDR, 0
        );
        _zapInWithPendlePT(usdc, myStrategy, address(PT_ADDR2), address(MARKET_ADDR2), magicUSDCAmount);
        _checkBasicInvariants(address(stkVault));
        _totalAssetsInStrategy = IStrategy(myStrategy).totalAssets();
        uint256 _residueOfPT1AmountInAsset = PendleStrategy(myStrategy).getPTAmountInAsset(address(PT_ADDR1));
        console.log(
            "_totalAssetsInStrategyAfterBuy2:%d,_residueOfPT1AmountInAsset:%d",
            _totalAssetsInStrategy,
            _residueOfPT1AmountInAsset
        );
        assertTrue(
            _assertApproximateEq(
                _totalAssetsInStrategy, (magicUSDCAmount + _residueOfPT1AmountInAsset), 5 * Constants.ONE_ETHER
            )
        );

        address[] memory _activePTMarkets = PendleStrategy(myStrategy).getActivePTs();
        assertEq(2, _activePTMarkets.length);
        assertTrue(PendleStrategy(myStrategy).getAllPTAmountsInAsset() > 0);

        // forward to market expire
        (uint80 roundId1, int256 answer1,,,) = IOracleAggregatorV3(YIELD_TOKEN_FEED1).latestRoundData();
        (uint80 roundId2, int256 answer2,,,) = IOracleAggregatorV3(YIELD_TOKEN_FEED2).latestRoundData();

        vm.warp(block.timestamp + Constants.ONE_YEAR);
        assertTrue(MARKET_ADDR2.isExpired());

        vm.mockCall(
            YIELD_TOKEN_FEED1,
            abi.encodeWithSelector(IOracleAggregatorV3.latestRoundData.selector),
            abi.encode(roundId1, answer1, block.timestamp, block.timestamp, roundId1)
        );

        vm.mockCall(
            YIELD_TOKEN_FEED2,
            abi.encodeWithSelector(IOracleAggregatorV3.latestRoundData.selector),
            abi.encode(roundId2, answer2, block.timestamp, block.timestamp, roundId2)
        );

        _redeemAfterPendlePTExpire(usdc, myStrategy, address(PT_ADDR2), YT_ADDR2, magicPTAmount);
        _checkBasicInvariants(address(stkVault));
        _totalAssetsInStrategy = IStrategy(myStrategy).totalAssets();
        _residueOfPT1AmountInAsset = PendleStrategy(myStrategy).getPTAmountInAsset(address(PT_ADDR1));
        uint256 _residueOfPT2AmountInAsset = PendleStrategy(myStrategy).getPTAmountInAsset(address(PT_ADDR2));
        console.log(
            "_totalAssetsInStrategyAfterRedeem:%d,_residueOfPT1AmountInAsset:%d,_residueOfPT2AmountInAsset:%d",
            _totalAssetsInStrategy,
            _residueOfPT1AmountInAsset,
            _residueOfPT2AmountInAsset
        );
        // assume USR is 1:1 to USDC after market expire
        assertTrue(
            _assertApproximateEq(
                _totalAssetsInStrategy,
                (magicPTAmount + _residueOfPT1AmountInAsset + _residueOfPT2AmountInAsset),
                5 * Constants.ONE_ETHER
            )
        );
        assertTrue(ERC20(usdc).balanceOf(myStrategy) > 0);

        bytes memory EMPTY_CALLDATA;
        _removePTMarket(address(PT_ADDR1), EMPTY_CALLDATA);
        _removePTMarket(address(PT_ADDR2), EMPTY_CALLDATA);
        _activePTMarkets = PendleStrategy(myStrategy).getActivePTs();
        assertEq(0, _activePTMarkets.length);
        assertEq(0, PendleStrategy(myStrategy).getAllPTAmountsInAsset());

        vm.startPrank(strategist);
        IStrategy(myStrategy).collectAll(EMPTY_CALLDATA);
        vm.stopPrank();
        assertEq(0, ERC20(usdc).balanceOf(myStrategy));
    }

    function test_BNBChain_Pendle_Rollover(uint256 _testVal) public {
        (myStrategy, strategist) = _createPendleStrategy();

        _prepareSwapForMockRouter(mockRouter, wETH, usdc, usdcWhale, usdcPerETH);
        _fundFirstDepositGenerouslyWithERC20(mockRouter, address(stkVault), usdcPerETH);

        address _user = TestUtils._getSugarUser();

        TestUtils._makeVaultDepositWithMockRouter(
            mockRouter, address(stkVault), _user, usdcPerETH, _testVal, 3 ether, 10 ether
        );

        _addPTMarketWithIntermediateOracle(
            address(MARKET_ADDR1), UNDERLYING_YIELD_ADDR1, UNDERLYING_YIELD_ADDR1, YIELD_TOKEN_FEED1, 0
        );
        _zapInWithPendlePT(usdc, myStrategy, address(PT_ADDR1), address(MARKET_ADDR1), magicUSDCAmount);
        _checkBasicInvariants(address(stkVault));
        uint256 _totalAssetsInStrategy = IStrategy(myStrategy).totalAssets();
        assertTrue(_assertApproximateEq(_totalAssetsInStrategy, magicUSDCAmount, 5 * Constants.ONE_ETHER));

        _addPTMarketWithIntermediateOracle(
            address(MARKET_ADDR2), UNDERLYING_YIELD_ADDR2, YIELD_TOKEN_FEED2, Constants.ZRO_ADDR, 0
        );

        address[] memory _activePTMarkets = PendleStrategy(myStrategy).getActivePTs();
        assertEq(2, _activePTMarkets.length);

        bytes memory _callData =
            hex"9fa02c8600000000000000000000000073d5dbf81a4f3bfa7b335e6a2d4638d6017a4fa8000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000002e4594a88cc00000000000000000000000073d5dbf81a4f3bfa7b335e6a2d4638d6017a4fa8000000000000000000000000e08fc3054450053cd341da695f72b18e6110fffc0000000000000000000000000000000000000000000000410d586a20a4c0000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000007788a3538c5fc7f9c7c8a74eac4c898fc8d87d9200000000000000000000000000000000000000000000003a139dfdf7f236826a0000000000000000000000007788a3538c5fc7f9c7c8a74eac4c898fc8d87d92000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f64c81f847a0000000000000000000000002f7cdcfe33194e4b00c8a42d6c106d2bcb9b55b50000000000000000000000001630d8228588d406767c2225f927154c05d2e2bb000000000000000000000000000000000000000000000041358e7c3d37e280ac000000000000000000000000000000000000000000000020ef16d4ba11e1965200000000000000000000000000000000000000000000004529498b86bf268879000000000000000000000000000000000000000000000041de2da97423c32ca4000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000e600000000000000000000000007788a3538c5fc7f9c7c8a74eac4c898fc8d87d9200000000000000000000000000000000000000000000003aa9cb8c2b94fb95d60000000000000000000000002492d0006411af6c8bbb1c8afc1b0197350a79e9000000000000000000000000d4f480965d2347d421f1bec7f545682e5ec2151d00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000bc4e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000006a000000000000000000000000000000000000000000000000000000000000008e000000000000000000000000000000000000000000000000000000000000005e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000007788a3538c5fc7f9c7c8a74eac4c898fc8d87d920000000000000000000000002492d0006411af6c8bbb1c8afc1b0197350a79e9000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000007fffffff0000000000000000000000000000000000000000000000000000000000000580000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000040d90ce4910000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001000000000000000000000000007be2dbf222eec2c2f06e05eab88c168b371449330000000000000000000000007788a3538c5fc7f9c7c8a74eac4c898fc8d87d92000000000000000000000000f3527ef8de265eaa3716fb312c12847bfba66cef0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003bd626a892da85bcac00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004063d71df3000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000100000000000000000000000000e1cf7b307d1136e12dc5c21aa790648e3b512f56000000000000000000000000f3527ef8de265eaa3716fb312c12847bfba66cef00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000418cd49addc8d8af0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec600000000000000000000000007a44f2b02668d297a2b4d594b064853c4c4b7c000000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000002492d0006411af6c8bbb1c8afc1b0197350a79e9000000000000000000000000000000000000000000000041729160ee7a532d530000000000000000000000000000000000000001014530ed8dc1f014325d91e7000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000449c0ecf9606d00000000000000416e640ff02fa5880e0000000000000000000000007788a3538c5fc7f9c7c8a74eac4c898fc8d87d920000000000000000000000002492d0006411af6c8bbb1c8afc1b0197350a79e9000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f94600000000000000000000000000000000000000000000003bd626a892da85bcac000000000000000000000000000000000000000000000040c6e30fc7625ec1920000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000003bd626a892da85bcac00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002897b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a22313230362e39353536343536353234353637222c22416d6f756e744f7574555344223a22313230362e36333136383337363637303032222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2231323036393932383635313537323239393338373032222c2254696d657374616d70223a313735333439363030312c22526f7574654944223a2233336466626464382d356664642d343834322d396633662d3264633136383736376361303a63353638643039322d636636612d346237612d393432612d653264643762613636326365222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a224734674677746268776e49416643566e65534e57653743306d6d6a44735a4e666c7747316257395956704d374a4d4e3659635a454d695a537137736665384c7a365a35797548345a445666794d4246506c66334d53484276385454443973446652564a346269515a7939473943546a534e723531707a58615a5463306e6e48496d2b64456e4d39393273364f30373870304e487938546c6a357745614c6c4f38746548632f6d325a596233536b6d3451762b78342f4f483934315550783053476d3157445a714b516e644343626b51756c556c513563675a46702f6e3861526c3262663264434d4b3946517777706f36344b5a52784371726b6864615734462b685733434c707466317a7769474539482b537776474334555a43307459324a31524a356c7948726f7778766363366b6e6139375a6a4d4d594733626c6957687149774b6e3359733974447868352b594f71594b3042513d3d227d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        vm.startPrank(strategist);
        PendleStrategy(myStrategy).rolloverPT(address(PT_ADDR1), address(PT_ADDR2), magicPTAmount, _callData);
        vm.stopPrank();

        assertTrue(_assertApproximateEq(IStrategy(myStrategy).totalAssets(), magicUSDCAmount, 5 * Constants.ONE_ETHER));
        _checkBasicInvariants(address(stkVault));
    }

    function _createPendleStrategy() internal returns (address, address) {
        bytes memory _constructorArgs = abi.encode(usdc, address(stkVault), USDC_USD_Feed, BNB_HEARTBEAT);
        address _deployedStrategy = deployWithCreationCodeAndConstructorArgs(
            BSC_PENDLE_STRATEGY_NAME, type(PendleStrategy).creationCode, _constructorArgs
        );

        assertEq(_deployedStrategy, BSC_PENDLE_STRATEGY_ADDRESS);

        vm.startPrank(stkVOwner);
        stkVault.addStrategy(_deployedStrategy, MAX_USDC_ALLOWED);
        vm.stopPrank();

        strategyOwner = PendleStrategy(_deployedStrategy).owner();

        address _routerAddr = pendleRouterV4;
        pendleHelper = new PendleHelper(_deployedStrategy, _routerAddr, address(swapper));
        swapper.setWhitelist(address(pendleHelper), true);

        vm.startPrank(strategyOwner);
        PendleStrategy(_deployedStrategy).setSwapper(address(swapper));
        PendleStrategy(_deployedStrategy).setPendleHelper(address(pendleHelper));
        vm.stopPrank();

        return (_deployedStrategy, PendleStrategy(_deployedStrategy).strategist());
    }

    function _addPTMarketWithIntermediateOracle(
        address _pendleMarket,
        address _underlyingYieldToken,
        address _underlyingOracle,
        address _intermediateOracle,
        uint32 _twapSeconds
    ) internal {
        vm.startPrank(strategyOwner);
        PendleStrategy(myStrategy).addPT(
            _pendleMarket,
            _underlyingYieldToken,
            _underlyingOracle,
            _intermediateOracle,
            _twapSeconds,
            uint32(Constants.ONE_YEAR) * 2
        );
        vm.stopPrank();
    }

    function _zapInWithPendlePT(
        address _assetToken,
        address _strategy,
        address _pendlePT,
        address _pendleMarket,
        uint256 _assetAmount
    ) internal {
        bytes memory _callData = _getZapInCalldataFromSDK(_pendlePT, _assetAmount);

        vm.startPrank(strategist);
        PendleStrategy(myStrategy).buyPTWithAsset(_assetToken, _pendlePT, _assetAmount, _callData);
        vm.stopPrank();
    }

    function _stormOutFromPendlePT(
        address _assetToken,
        address _strategy,
        address _pendlePT,
        address _pendleMarket,
        uint256 _ptAmount
    ) internal {
        bytes memory _callData = _getStormOutCalldataFromSDK(_pendlePT, _ptAmount);
        vm.startPrank(strategist);
        PendleStrategy(myStrategy).sellPTForAsset(_assetToken, _pendlePT, _ptAmount, _callData);
        vm.stopPrank();
    }

    function _getZapInCalldataFromSDK(address _pendlePT, uint256 _assetAmount) internal view returns (bytes memory) {
        bytes memory _callData;
        if (_pendlePT == address(PT_ADDR1) && _assetAmount == magicUSDCAmount) {
            // slippage 1% with aggragator enabled
            _callData =
                hex"c81f847a0000000000000000000000002f7cdcfe33194e4b00c8a42d6c106d2bcb9b55b5000000000000000000000000e08fc3054450053cd341da695f72b18e6110fffc0000000000000000000000000000000000000000000000431812f5f022584fce000000000000000000000000000000000000000000000021e2c8edfd289e6132000000000000000000000000000000000000000000000047290c5a2d3bb2ff4f000000000000000000000000000000000000000000000043c591dbfa513cc264000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d000000000000000000000000000000000000000000000042ed123aef198720000000000000000000000000007788a3538c5fc7f9c7c8a74eac4c898fc8d87d92000000000000000000000000d4f480965d2347d421f1bec7f545682e5ec2151d00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b64e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000008800000000000000000000000000000000000000000000000000000000000000580000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d0000000000000000000000007788a3538c5fc7f9c7c8a74eac4c898fc8d87d92000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000004048bad50c0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001e40450f8e21bb68490d7d91ab422888fb3d60f10000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000000000000000000000000042ed123aef198720000000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000004063d71df3000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000100000000000000000000000000e1cf7b307d1136e12dc5c21aa790648e3b512f5600000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000f3527ef8de265eaa3716fb312c12847bfba66cef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000042e7fc077abb7fd2ce00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000abe8ad63400cccb1036680f300576f605e1e6cd1000000000000000000000000f3527ef8de265eaa3716fb312c12847bfba66cef0000000000000000000000007788a3538c5fc7f9c7c8a74eac4c898fc8d87d92000000000000000000000000000000000000000000000042ff430db32264584900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000004017915ab9e57000000000000003d1f79dae9f0d4ce330000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d0000000000000000000000007788a3538c5fc7f9c7c8a74eac4c898fc8d87d92000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000042ed123aef1987200000000000000000000000000000000000000000000000003c8300510b70fba32d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec60000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000042ed123aef1987200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002897b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a22313233352e39383737313136313635393939222c22416d6f756e744f7574555344223a22313233362e33373539323938363739353232222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2231313237353139343733303831393433313137333633222c2254696d657374616d70223a313735333433323238392c22526f7574654944223a2265663239383736302d356466322d343533652d393739342d3335616634363764373561623a37633464323837332d376461302d343337612d613430302d326337636538653562663135222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22476e746c4f516a357a474c447a6d353061343838453459712f694a2b65496e7a5764626c32374f4d724b6b50637758474b595458554d532b76432f466a34467839414d46787159727970634954774d497842702b65655a4d344134684164704d7374467878613648504a746c59534f573652656d36357130357a7663585472364537317a56412b44586379514c73786b4e3357545679324d70564832496c574855534251466b774832735445377a743649516735416f4e626f5467426c632f6f684f2b5032663768644d316e564a48392b675a73706f63484d577735763477683243624e535958572b2f676f4b494a72774a68766436776a616762752b54636430774a672f6456563850454a6876595355685a6864567a3449576b3342774e5135397a5a666b773531467a42334d346952452f676d5031372f6c376638526538747263375258635742455452636566636235596253673d3d227d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        } else if (_pendlePT == address(PT_ADDR2) && _assetAmount == magicUSDCAmount) {
            // slippage 1% with aggragator enabled
            _callData =
                hex"c81f847a0000000000000000000000002f7cdcfe33194e4b00c8a42d6c106d2bcb9b55b50000000000000000000000001630d8228588d406767c2225f927154c05d2e2bb00000000000000000000000000000000000000000000004419a64de45ecff12900000000000000000000000000000000000000000000002264dfa0dff1d30a9b0000000000000000000000000000000000000000000000483a3c05097bd4c979000000000000000000000000000000000000000000000044c9bf41bfe3a61537000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000da00000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d000000000000000000000000000000000000000000000042ed123aef198720000000000000000000000000002492d0006411af6c8bbb1c8afc1b0197350a79e9000000000000000000000000d4f480965d2347d421f1bec7f545682e5ec2151d00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000040000000000000000000000009b9efa5efa731ea9bbb0369e91fa17abf249cfd4000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b0403b87e5f000000000000000000000000000000000000000000000000000000000001a663000000000000000000000000888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d0000000000000000000000002492d0006411af6c8bbb1c8afc1b0197350a79e9000000000000000000000000000000000000000000000042ed123aef1987200000000000000000000000000000000000000000000000004250a5965d36d9fb4c0000000000000000000000000000000000000000000000000000000068834f3c000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000ae0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000002d827d095ae86620000000000000000000000000000000000000000000000000156a9531943121000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000068000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c0fab674ff7ddf8b891495ba9975b0fe1dcac7350000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c0fab674ff7ddf8b891495ba9975b0fe1dcac735000000000000000000000000000000000000000000000000000000000000000100000000000000000000271000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000800000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000000000000000000000000000000000000000000020000000000000000000000007a7ad9aa93cd0a2d0255326e5fb145cec14997ff0000000000000000000000007a7ad9aa93cd0a2d0255326e5fb145cec14997ff00000000000000000000000000000000000000000000000000000000000000020000000000000000000000007a7ad9aa93cd0a2d0255326e5fb145cec14997ff0000000000000000000000007a7ad9aa93cd0a2d0255326e5fb145cec14997ff00000000000000000000000000000000000000000000000000000000000000028000000000000000000020d007a44f2b02668d297a2b4d594b064853c4c4b7c0800000000000000000000640012b95cfdeb7fb2c205b96282b749e05c7d29d5f00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004000000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000002492d0006411af6c8bbb1c8afc1b0197350a79e900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004000000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000002492d0006411af6c8bbb1c8afc1b0197350a79e90000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a7ad9aa93cd0a2d0255326e5fb145cec14997ff00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a7ad9aa93cd0a2d0255326e5fb145cec14997ff0000000000000000000000000000000000000000000000000000000000000001800000000000000000002710182492dbf06fcdaa1796fc56456afd324b2a738a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d0000000000000000000000002492d0006411af6c8bbb1c8afc1b0197350a79e90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        }
        return _callData;
    }

    function _getStormOutCalldataFromSDK(address _pendlePT, uint256 _ptAmount) internal view returns (bytes memory) {
        bytes memory _callData;
        if (_pendlePT == address(PT_ADDR1) && _ptAmount == magicPTAmount) {
            // slippage 1% with aggragator enabled
            _callData =
                hex"594a88cc0000000000000000000000002f7cdcfe33194e4b00c8a42d6c106d2bcb9b55b5000000000000000000000000e08fc3054450053cd341da695f72b18e6110fffc0000000000000000000000000000000000000000000000410d586a20a4c0000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000f400000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000000000000000000000000003f855187b2faaf8aea0000000000000000000000007788a3538c5fc7f9c7c8a74eac4c898fc8d87d92000000000000000000000000d4f480965d2347d421f1bec7f545682e5ec2151d00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000d44e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000008200000000000000000000000000000000000000000000000000000000000000a600000000000000000000000000000000000000000000000000000000000000760000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000007788a3538c5fc7f9c7c8a74eac4c898fc8d87d920000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000007fffffff0000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000040d90ce4910000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001000000000000000000000000007be2dbf222eec2c2f06e05eab88c168b371449330000000000000000000000007788a3538c5fc7f9c7c8a74eac4c898fc8d87d92000000000000000000000000f3527ef8de265eaa3716fb312c12847bfba66cef0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003bd2fcee53f547a2c200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004063d71df3000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000100000000000000000000000000e1cf7b307d1136e12dc5c21aa790648e3b512f56000000000000000000000000f3527ef8de265eaa3716fb312c12847bfba66cef00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041887b74aa7ccc701100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004076dcc3ef000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000002000000000000000000000000028e2ea090877bf75740558f6bfb36a5ffee9e9df0000000000000000000000000000000000000000000000416eaf2f7933dd5cdf00000000000000000000000000000000000000000000000000000000000000800000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec60000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000000000000000000000000416eaf2f7933dd5cdf0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000001000276a4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000449feea2bac2100000000000000417215f0a8e3407f9c0000000000000000000000007788a3538c5fc7f9c7c8a74eac4c898fc8d87d920000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f94600000000000000000000000000000000000000000000003bd2fcee53f547a2c2000000000000000000000000000000000000000000000040ca8b7b0d994ca74b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000003bd2fcee53f547a2c200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002897b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a22313230382e36303036343834313337313833222c22416d6f756e744f7574555344223a22313230382e30363830353035383136343935222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2231323037323539313036303934313133333930343932222c2254696d657374616d70223a313735333433323233362c22526f7574654944223a2263393239363538302d646631642d343030622d386532322d6132373865666465353934333a30326334353061302d613433392d343230632d623564332d663636653733306161316666222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a224739544148736279594e396764695473755855374a34576a4432654d6d586d38744f34476e487a5762646c616254792b6b3864656263656675517438454b5248587970616661394d624a66685867314c5a577a51566d4c41785239425231335450497a773646756e7a38327257463438756b68705253444665494739726966364b53366b6956423943506c30426f464a793279452f7571573642523667674932542f654f676c4642472f4f4f76786d503664462b5567445649586b77454a7556766c76737967565268486e5549787137664c707070733765366c446d413538796b6c324738626f3175306d7570684236534e486e42456f6c6431754d7251733175344949524f753545504d716736474738547447327330372b635837447566466e5a2b62315965487a4d475a595a594a46656c7057775258585458716b4e722f306e6138715355374a32696f634f78423574467933513d3d227d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        }
        return _callData;
    }

    function _redeemAfterPendlePTExpire(
        address _assetToken,
        address _strategy,
        address _pendlePT,
        address _ytToken,
        uint256 _ptAmount
    ) internal {
        bytes memory _callData = _getRedeemAfterExpireCalldataFromSDK(_pendlePT, _ptAmount);
        vm.startPrank(strategist);
        PendleStrategy(myStrategy).redeemPTForAsset(_assetToken, _pendlePT, _ptAmount, _callData);
        vm.stopPrank();
    }

    function _getRedeemAfterExpireCalldataFromSDK(address _pendlePT, uint256 _ptAmount)
        internal
        view
        returns (bytes memory)
    {
        bytes memory _callData;
        if (_pendlePT == address(PT_ADDR2) && _ptAmount == magicPTAmount) {
            // slippage 1% with aggragator enabled
            _callData =
                hex"47f1de220000000000000000000000002f7cdcfe33194e4b00c8a42d6c106d2bcb9b55b5000000000000000000000000dcf4f4260ab766fd458e4d883ddf01522a7e4bb80000000000000000000000000000000000000000000000410d586a20a4c0000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000000000000000000000000004086c490621c338f980000000000000000000000002492d0006411af6c8bbb1c8afc1b0197350a79e9000000000000000000000000d4f480965d2347d421f1bec7f545682e5ec2151d00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000ba4e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000068000000000000000000000000000000000000000000000000000000000000008c000000000000000000000000000000000000000000000000000000000000005c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000002492d0006411af6c8bbb1c8afc1b0197350a79e90000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000007fffffff000000000000000000000000000000000000000000000000000000000000056000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec600000000000000000000000007a44f2b02668d297a2b4d594b064853c4c4b7c00000000000000000000000002492d0006411af6c8bbb1c8afc1b0197350a79e900000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000000000000000000000000425a698af8562000000000000000000000000000000000000000000000fea59865cad4c242b6bdd04e0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004076dcc3ef000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000002000000000000000000000000028e2ea090877bf75740558f6bfb36a5ffee9e9df0000000000000000000000000000000000000000000000427730f15111d8ef1000000000000000000000000000000000000000000000000000000000000000800000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec60000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000000000000000000000000427730f15111d8ef100000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000001000276a400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000045b6115e1f40600000000000000427b56282705c8846f0000000000000000000000002492d0006411af6c8bbb1c8afc1b0197350a79e90000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000000000000000000000000000425a698af856200000000000000000000000000000000000000000000000000041d124a7c03b7c45ab0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000425a698af85620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002887b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a22313232362e323037383037313539373439222c22416d6f756e744f7574555344223a22313232362e32303133343839303434393033222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2231323236333732343433393237353538353231393637222c2254696d657374616d70223a313735333439383239382c22526f7574654944223a2239646231386162332d323036652d346563652d616137332d6233376166393963656466663a63326631323033652d633832622d343865322d383535362d316366383536373037386639222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22536e4f777568693155544c717443662f437278666d71784e4842616b415978364d4542747a4d6e305353414546564b424b716f31746b3774434a687877662b5671524c444d387730554a425135465634416268753551414634364579674d3652723774763847414841564561484842483349754f58427876364975382f597137724265733455382b5257387156376a53366e365065366a525939546258652f686f767373655a75474b616e2b6c3858675764497131354635666e414951512f74367a4b756f513576324653525743472f35344431674b37686366476146336162434b4b51554d514337366444572b6b4d6b4f6e48387975534c2f76657a434e664b53724355514f7a7835746a51656d707377634a334563704131456162756c5254484e7761656e5034714e53543249626a37574c487274474d3452787a6b6e4e512f447057345a59616b55547676627a4431545466773d3d227d7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        }
        return _callData;
    }

    function _removePTMarket(address _pendlePT, bytes memory _swapData) internal {
        vm.startPrank(strategyOwner);
        PendleStrategy(myStrategy).removePT(_pendlePT, _swapData);
        vm.stopPrank();
    }
}
